[{"path":"https://torfason.github.io/zmisc/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Magnus Thor Torfason Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"vector-look-ups-and-safer-sampling","dir":"Articles","previous_headings":"","what":"Vector Look-Ups and Safer Sampling","title":"zmisc","text":"collection utility functions facilitate looking vector values lookup table, support safer approach vector sampling, sequence generation, aggregation.","code":""},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"zmisc","text":"can install released version zmisc CRAN : can use pak install development version zmisc GitHub :","code":"install.packages(\"zmisc\") pak::pak(\"torfason/zmisc\")"},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"zmisc","text":"order use package, generally want attach first:","code":"library(zmisc)"},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"quick-and-easy-value-lookups","dir":"Articles","previous_headings":"","what":"Quick and easy value lookups","title":"zmisc","text":"functions lookup() lookuper() used look values lookup table, can supplied vector, list, data.frame. functions ways similar Excel function VLOOKUP(), designed work smoothly R workflow, particular within pipes.","code":""},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"lookup-lookup-values-from-a-lookup-table","dir":"Articles","previous_headings":"Quick and easy value lookups","what":"lookup: Lookup values from a lookup table","title":"zmisc","text":"lookup() function implements lookup certain strings (variable names) lookup table maps keys onto values (variable labels descriptions). Original values returned found lookup table. lookup table can form two-column data.frame, form named vector, form list. table form data.frame, lookup columns named name (key) value (value). lookup table form named vector list, name used key, returned value taken values vector list. names x included result.","code":""},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"examples","dir":"Articles","previous_headings":"Quick and easy value lookups > lookup: Lookup values from a lookup table","what":"Examples","title":"zmisc","text":"","code":"fruit_lookup_vector <- c(a=\"Apple\", b=\"Banana\", c=\"Cherry\") lookup(letters[1:5], fruit_lookup_vector)  mtcars_lookup_data_frame <- data.frame(   name = c(\"mpg\", \"hp\", \"wt\"),   value = c(\"Miles/(US) gallon\", \"Gross horsepower\", \"Weight (1000 lbs)\")) lookup(names(mtcars), mtcars_lookup_data_frame)"},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"lookuper-construct-lookup-function-based-on-a-specific-lookup-table","dir":"Articles","previous_headings":"Quick and easy value lookups","what":"lookuper: Construct lookup function based on a specific lookup table","title":"zmisc","text":"lookuper() function returns function equivalent lookup() function, except instead taking lookup table argument, lookup table embedded function . can useful, particular using lookup function argument functions expect function maps character->character offer good way pass additional arguments function.","code":""},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"examples-1","dir":"Articles","previous_headings":"Quick and easy value lookups > lookuper: Construct lookup function based on a specific lookup table","what":"Examples","title":"zmisc","text":"","code":"lookup_fruits <- lookuper(list(a=\"Apple\", b=\"Banana\", c=\"Cherry\")) lookup_fruits(letters[1:5])"},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"safer-sampling-sequencing-and-aggregation","dir":"Articles","previous_headings":"","what":"Safer sampling, sequencing and aggregation","title":"zmisc","text":"functions zample(), zeq(), zingle() intended make code less likely break mysterious ways encounter unexpected boundary conditions. zample() zeq() almost identical sample() seq() functions, bit safer.","code":""},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"zample-sample-from-a-vector-in-a-safe-way","dir":"Articles","previous_headings":"Safer sampling, sequencing and aggregation","what":"zample: Sample from a vector in a safe way","title":"zmisc","text":"zample() function duplicates functionality sample(), exception attempt (sometimes dangerous) user-friendliness switching interpretation first element number length vector 1. zample() always treats first argument vector containing elements sampled, code won’t break unexpected ways input vector happens length 1.","code":""},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"examples-2","dir":"Articles","previous_headings":"Safer sampling, sequencing and aggregation > zample: Sample from a vector in a safe way","what":"Examples","title":"zmisc","text":"","code":"# For vectors of length 2 or more, zample() and sample() are identical set.seed(42); zample(7:11) set.seed(42); sample(7:11)  # For vectors of length 1, zample() will still sample from the vector, # whereas sample() will \"magically\" switch to interpreting the input # as a number n, and sampling from the vector 1:n. set.seed(42); zample(7) set.seed(42); sample(7)  # The other arguments work in the same way as for sample() set.seed(42); zample(7:11, size=13, replace=TRUE, prob=(5:1)^3) set.seed(42); sample(7:11, size=13, replace=TRUE, prob=(5:1)^3)  # Of course, sampling more than the available elements without # setting replace=TRUE will result in an error set.seed(42); tryCatch(zample(7, size=2), error=wrap_error)"},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"zeq-generate-sequence-in-a-safe-way","dir":"Articles","previous_headings":"Safer sampling, sequencing and aggregation","what":"zeq: Generate sequence in a safe way","title":"zmisc","text":"zeq() function creates increasing integer sequence, differs standard one silently generate decreasing sequence second argument smaller first. second argument one smaller first generate empty sequence, difference greater, function throw error.","code":""},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"examples-3","dir":"Articles","previous_headings":"Safer sampling, sequencing and aggregation > zeq: Generate sequence in a safe way","what":"Examples","title":"zmisc","text":"","code":"# For increasing sequences, zeq() and seq() are identical zeq(11,15) zeq(11,11)  # If second argument equals first-1, an empty sequence is returned zeq(11,10)  # If second argument is less than first-1, the function throws an error tryCatch(zeq(11,9), error=wrap_error)"},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"zingle-return-the-single-unique-value-found-in-a-vector","dir":"Articles","previous_headings":"Safer sampling, sequencing and aggregation","what":"zingle: Return the single (unique) value found in a vector","title":"zmisc","text":"zingle() function returns first element vector, elements identical first one (vector zingle value). elements identical, throws error. vector must contain least one non-NA value, function errors well. especially useful aggregations, values given group identical, want make sure.","code":""},{"path":"https://torfason.github.io/zmisc/articles/zmisc.html","id":"examples-4","dir":"Articles","previous_headings":"Safer sampling, sequencing and aggregation > zingle: Return the single (unique) value found in a vector","what":"Examples","title":"zmisc","text":"","code":"# If all elements are identical, all is good. # The value of the element is returned. zingle(c(\"Alpha\", \"Alpha\", \"Alpha\"))  # If any elements differ, an error is thrown tryCatch(zingle(c(\"Alpha\", \"Beta\", \"Alpha\")), error=wrap_error)  if (require(\"dplyr\", quietly=TRUE, warn.conflicts=FALSE)) {   d <- tibble::tribble(     ~id, ~name, ~fouls,     1, \"James\", 3,     2, \"Jack\",  2,     1, \"James\", 4   )    # If the data is of the correct format, all is good   d %>%     dplyr::group_by(id) %>%     dplyr::summarise(name=zingle(name), total_fouls=sum(fouls))  }  if (require(\"dplyr\", quietly=TRUE, warn.conflicts=FALSE)) {   # If a name does not match its ID, we should get an error   d[1,\"name\"] <- \"Jammes\"   tryCatch({     d %>%       dplyr::group_by(id) %>%       dplyr::summarise(name=zingle(name), total_fouls=sum(fouls))   }, error=wrap_error) }"},{"path":"https://torfason.github.io/zmisc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Magnus Thor Torfason. Maintainer.","code":""},{"path":"https://torfason.github.io/zmisc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Torfason MT (2022). zmisc: Vector Look-Ups Safer Sampling. https://github.com/torfason/zmisc/, https://torfason.github.io/zmisc/.","code":"@Manual{,   title = {zmisc: Vector Look-Ups and Safer Sampling},   author = {Magnus Thor Torfason},   year = {2022},   note = {https://github.com/torfason/zmisc/, https://torfason.github.io/zmisc/}, }"},{"path":[]},{"path":"https://torfason.github.io/zmisc/index.html","id":"vector-look-ups-and-safer-sampling","dir":"","previous_headings":"","what":"Vector Look-Ups and Safer Sampling","title":"Vector Look-Ups and Safer Sampling","text":"collection utility functions facilitate looking vector values lookup table, support safer approach vector sampling, sequence generation, aggregation.","code":""},{"path":"https://torfason.github.io/zmisc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vector Look-Ups and Safer Sampling","text":"can install released version zmisc CRAN : can use pak install development version zmisc GitHub :","code":"install.packages(\"zmisc\") pak::pak(\"torfason/zmisc\")"},{"path":"https://torfason.github.io/zmisc/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Vector Look-Ups and Safer Sampling","text":"order use package, generally want attach first:","code":"library(zmisc)"},{"path":"https://torfason.github.io/zmisc/index.html","id":"quick-and-easy-value-lookups","dir":"","previous_headings":"","what":"Quick and easy value lookups","title":"Vector Look-Ups and Safer Sampling","text":"functions lookup() lookuper() used look values lookup table, can supplied vector, list, data.frame. functions ways similar Excel function VLOOKUP(), designed work smoothly R workflow, particular within pipes.","code":""},{"path":"https://torfason.github.io/zmisc/index.html","id":"lookup-lookup-values-from-a-lookup-table","dir":"","previous_headings":"Quick and easy value lookups","what":"lookup: Lookup values from a lookup table","title":"Vector Look-Ups and Safer Sampling","text":"lookup() function implements lookup certain strings (variable names) lookup table maps keys onto values (variable labels descriptions). Original values returned found lookup table. lookup table can form two-column data.frame, form named vector, form list. table form data.frame, lookup columns named name (key) value (value). lookup table form named vector list, name used key, returned value taken values vector list. names x included result.","code":""},{"path":"https://torfason.github.io/zmisc/index.html","id":"examples","dir":"","previous_headings":"Quick and easy value lookups > lookup: Lookup values from a lookup table","what":"Examples","title":"Vector Look-Ups and Safer Sampling","text":"","code":"fruit_lookup_vector <- c(a=\"Apple\", b=\"Banana\", c=\"Cherry\") lookup(letters[1:5], fruit_lookup_vector)  mtcars_lookup_data_frame <- data.frame(   name = c(\"mpg\", \"hp\", \"wt\"),   value = c(\"Miles/(US) gallon\", \"Gross horsepower\", \"Weight (1000 lbs)\")) lookup(names(mtcars), mtcars_lookup_data_frame)"},{"path":"https://torfason.github.io/zmisc/index.html","id":"lookuper-construct-lookup-function-based-on-a-specific-lookup-table","dir":"","previous_headings":"Quick and easy value lookups","what":"lookuper: Construct lookup function based on a specific lookup table","title":"Vector Look-Ups and Safer Sampling","text":"lookuper() function returns function equivalent lookup() function, except instead taking lookup table argument, lookup table embedded function . can useful, particular using lookup function argument functions expect function maps character->character offer good way pass additional arguments function.","code":""},{"path":"https://torfason.github.io/zmisc/index.html","id":"examples-1","dir":"","previous_headings":"Quick and easy value lookups > lookuper: Construct lookup function based on a specific lookup table","what":"Examples","title":"Vector Look-Ups and Safer Sampling","text":"","code":"lookup_fruits <- lookuper(list(a=\"Apple\", b=\"Banana\", c=\"Cherry\")) lookup_fruits(letters[1:5])"},{"path":"https://torfason.github.io/zmisc/index.html","id":"safer-sampling-sequencing-and-aggregation","dir":"","previous_headings":"","what":"Safer sampling, sequencing and aggregation","title":"Vector Look-Ups and Safer Sampling","text":"functions zample(), zeq(), zingle() intended make code less likely break mysterious ways encounter unexpected boundary conditions. zample() zeq() almost identical sample() seq() functions, bit safer.","code":""},{"path":"https://torfason.github.io/zmisc/index.html","id":"zample-sample-from-a-vector-in-a-safe-way","dir":"","previous_headings":"Safer sampling, sequencing and aggregation","what":"zample: Sample from a vector in a safe way","title":"Vector Look-Ups and Safer Sampling","text":"zample() function duplicates functionality sample(), exception attempt (sometimes dangerous) user-friendliness switching interpretation first element number length vector 1. zample() always treats first argument vector containing elements sampled, code won’t break unexpected ways input vector happens length 1.","code":""},{"path":"https://torfason.github.io/zmisc/index.html","id":"examples-2","dir":"","previous_headings":"Safer sampling, sequencing and aggregation > zample: Sample from a vector in a safe way","what":"Examples","title":"Vector Look-Ups and Safer Sampling","text":"","code":"# For vectors of length 2 or more, zample() and sample() are identical set.seed(42); zample(7:11) set.seed(42); sample(7:11)  # For vectors of length 1, zample() will still sample from the vector, # whereas sample() will \"magically\" switch to interpreting the input # as a number n, and sampling from the vector 1:n. set.seed(42); zample(7) set.seed(42); sample(7)  # The other arguments work in the same way as for sample() set.seed(42); zample(7:11, size=13, replace=TRUE, prob=(5:1)^3) set.seed(42); sample(7:11, size=13, replace=TRUE, prob=(5:1)^3)  # Of course, sampling more than the available elements without # setting replace=TRUE will result in an error set.seed(42); tryCatch(zample(7, size=2), error=wrap_error)"},{"path":"https://torfason.github.io/zmisc/index.html","id":"zeq-generate-sequence-in-a-safe-way","dir":"","previous_headings":"Safer sampling, sequencing and aggregation","what":"zeq: Generate sequence in a safe way","title":"Vector Look-Ups and Safer Sampling","text":"zeq() function creates increasing integer sequence, differs standard one silently generate decreasing sequence second argument smaller first. second argument one smaller first generate empty sequence, difference greater, function throw error.","code":""},{"path":"https://torfason.github.io/zmisc/index.html","id":"examples-3","dir":"","previous_headings":"Safer sampling, sequencing and aggregation > zeq: Generate sequence in a safe way","what":"Examples","title":"Vector Look-Ups and Safer Sampling","text":"","code":"# For increasing sequences, zeq() and seq() are identical zeq(11,15) zeq(11,11)  # If second argument equals first-1, an empty sequence is returned zeq(11,10)  # If second argument is less than first-1, the function throws an error tryCatch(zeq(11,9), error=wrap_error)"},{"path":"https://torfason.github.io/zmisc/index.html","id":"zingle-return-the-single-unique-value-found-in-a-vector","dir":"","previous_headings":"Safer sampling, sequencing and aggregation","what":"zingle: Return the single (unique) value found in a vector","title":"Vector Look-Ups and Safer Sampling","text":"zingle() function returns first element vector, elements identical first one (vector zingle value). elements identical, throws error. vector must contain least one non-NA value, function errors well. especially useful aggregations, values given group identical, want make sure.","code":""},{"path":"https://torfason.github.io/zmisc/index.html","id":"examples-4","dir":"","previous_headings":"Safer sampling, sequencing and aggregation > zingle: Return the single (unique) value found in a vector","what":"Examples","title":"Vector Look-Ups and Safer Sampling","text":"","code":"# If all elements are identical, all is good. # The value of the element is returned. zingle(c(\"Alpha\", \"Alpha\", \"Alpha\"))  # If any elements differ, an error is thrown tryCatch(zingle(c(\"Alpha\", \"Beta\", \"Alpha\")), error=wrap_error)  if (require(\"dplyr\", quietly=TRUE, warn.conflicts=FALSE)) {   d <- tibble::tribble(     ~id, ~name, ~fouls,     1, \"James\", 3,     2, \"Jack\",  2,     1, \"James\", 4   )    # If the data is of the correct format, all is good   d %>%     dplyr::group_by(id) %>%     dplyr::summarise(name=zingle(name), total_fouls=sum(fouls))  }  if (require(\"dplyr\", quietly=TRUE, warn.conflicts=FALSE)) {   # If a name does not match its ID, we should get an error   d[1,\"name\"] <- \"Jammes\"   tryCatch({     d %>%       dplyr::group_by(id) %>%       dplyr::summarise(name=zingle(name), total_fouls=sum(fouls))   }, error=wrap_error) }"},{"path":"https://torfason.github.io/zmisc/reference/lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup values from a lookup table — lookup","title":"Lookup values from a lookup table — lookup","text":"lookup() function implements lookup certain strings (variable names) lookup table maps keys onto values (variable labels descriptions). Original values returned found lookup table. lookup table can form two-column data.frame, form named vector, form list. table form data.frame, lookup columns named name (key) value (value). lookup table form named vector list, name used key, returned value taken values vector list. names x included result.","code":""},{"path":"https://torfason.github.io/zmisc/reference/lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup values from a lookup table — lookup","text":"","code":"lookup(x, lookup_table)"},{"path":"https://torfason.github.io/zmisc/reference/lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup values from a lookup table — lookup","text":"x string vector whose elements shall looked lookup_table lookup table use.","code":""},{"path":"https://torfason.github.io/zmisc/reference/lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup values from a lookup table — lookup","text":"string vector based x, values replaced lookup values lookup_table. values found lookup table returned unchanged.","code":""},{"path":"https://torfason.github.io/zmisc/reference/lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup values from a lookup table — lookup","text":"","code":"fruit_lookup_vector <- c(a=\"Apple\", b=\"Banana\", c=\"Cherry\") lookup(letters[1:5], fruit_lookup_vector) #> [1] \"Apple\"  \"Banana\" \"Cherry\" \"d\"      \"e\"       mtcars_lookup_data_frame <- data.frame(   name = c(\"mpg\", \"hp\", \"wt\"),   value = c(\"Miles/(US) gallon\", \"Gross horsepower\", \"Weight (1000 lbs)\")) lookup(names(mtcars), mtcars_lookup_data_frame) #>  [1] \"Miles/(US) gallon\" \"cyl\"               \"disp\"              #>  [4] \"Gross horsepower\"  \"drat\"              \"Weight (1000 lbs)\" #>  [7] \"qsec\"              \"vs\"                \"am\"                #> [10] \"gear\"              \"carb\""},{"path":"https://torfason.github.io/zmisc/reference/lookuper.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct lookup function based on a specific lookup table — lookuper","title":"Construct lookup function based on a specific lookup table — lookuper","text":"lookuper() function returns function equivalent lookup() function, except instead taking lookup table argument, lookup table embedded function . can useful, particular using lookup function argument functions expect function maps character->character offer good way pass additional arguments function.","code":""},{"path":"https://torfason.github.io/zmisc/reference/lookuper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct lookup function based on a specific lookup table — lookuper","text":"","code":"lookuper(lookup_table)"},{"path":"https://torfason.github.io/zmisc/reference/lookuper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct lookup function based on a specific lookup table — lookuper","text":"lookup_table lookup table used underlying lookup table returned function.","code":""},{"path":"https://torfason.github.io/zmisc/reference/lookuper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct lookup function based on a specific lookup table — lookuper","text":"function takes character vectors argument x, returns either corresponding values underlying lookup table, original values x elements found lookup table.","code":""},{"path":"https://torfason.github.io/zmisc/reference/lookuper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct lookup function based on a specific lookup table — lookuper","text":"","code":"lookup_fruits <- lookuper(list(a=\"Apple\", b=\"Banana\", c=\"Cherry\")) lookup_fruits(letters[1:5]) #> [1] \"Apple\"  \"Banana\" \"Cherry\" \"d\"      \"e\""},{"path":"https://torfason.github.io/zmisc/reference/standardize_lookup_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to standardize the lookup_table. — standardize_lookup_table","title":"Helper function to standardize the lookup_table. — standardize_lookup_table","text":"Preprocessing lookup table convert list can take time, possible, want . Therefore offload helper function","code":""},{"path":"https://torfason.github.io/zmisc/reference/standardize_lookup_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to standardize the lookup_table. — standardize_lookup_table","text":"","code":"standardize_lookup_table(lookup_table)"},{"path":"https://torfason.github.io/zmisc/reference/standardize_lookup_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to standardize the lookup_table. — standardize_lookup_table","text":"lookup_table unstandardized lookup table (must still one formats specified lookup() function).","code":""},{"path":"https://torfason.github.io/zmisc/reference/standardize_lookup_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to standardize the lookup_table. — standardize_lookup_table","text":"lookup table list.","code":""},{"path":"https://torfason.github.io/zmisc/reference/wrap_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to output an error — wrap_error","title":"Utility function to output an error — wrap_error","text":"function used capture errors, typically inside tryCatch() statement output clean readable way. function provides line-wrapping, configurable width. printing error message, prefixes text \"#E> \" make easier look error.","code":""},{"path":"https://torfason.github.io/zmisc/reference/wrap_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to output an error — wrap_error","text":"","code":"wrap_error(e, wrap = 50)"},{"path":"https://torfason.github.io/zmisc/reference/wrap_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to output an error — wrap_error","text":"e error wrap. wrap many characters per line wrapping.","code":""},{"path":"https://torfason.github.io/zmisc/reference/wrap_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to output an error — wrap_error","text":"original error returned invisibly.","code":""},{"path":"https://torfason.github.io/zmisc/reference/wrap_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function to output an error — wrap_error","text":"","code":"tryCatch(stop(\"This is an error\"), error=wrap_error) #> #E> This is an error"},{"path":"https://torfason.github.io/zmisc/reference/zample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from a vector in a safe way — zample","title":"Sample from a vector in a safe way — zample","text":"zample() function duplicates functionality sample(), exception attempt (sometimes dangerous) user-friendliness switching interpretation first element number length vector 1. zample() always treats first argument vector containing elements sampled, code break unexpected ways input vector happens length 1.","code":""},{"path":"https://torfason.github.io/zmisc/reference/zample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from a vector in a safe way — zample","text":"","code":"zample(x, size = length(x), replace = FALSE, prob = NULL)"},{"path":"https://torfason.github.io/zmisc/reference/zample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from a vector in a safe way — zample","text":"x vector sample size number elements sample x (defaults length(x)) replace elements replaced sampling (defaults false) prob vector probability weights (defaults equal probabilities)","code":""},{"path":"https://torfason.github.io/zmisc/reference/zample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from a vector in a safe way — zample","text":"resulting sample","code":""},{"path":"https://torfason.github.io/zmisc/reference/zample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample from a vector in a safe way — zample","text":"really want sample interval 1 n, can use sample(n) sample.int(n) (make sure pass vectors length one functions).","code":""},{"path":"https://torfason.github.io/zmisc/reference/zample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from a vector in a safe way — zample","text":"","code":"# For vectors of length 2 or more, zample() and sample() are identical set.seed(42); zample(7:11) #> [1]  7 11 10  9  8 set.seed(42); sample(7:11) #> [1]  7 11 10  9  8  # For vectors of length 1, zample() will still sample from the vector, # whereas sample() will \"magically\" switch to interpreting the input # as a number n, and sampling from the vector 1:n. set.seed(42); zample(7) #> [1] 7 set.seed(42); sample(7) #> [1] 1 5 7 6 2 3 4  # The other arguments work in the same way as for sample() set.seed(42); zample(7:11, size=13, replace=TRUE, prob=(5:1)^3) #>  [1] 9 9 7 8 8 7 8 7 8 8 7 8 9 set.seed(42); sample(7:11, size=13, replace=TRUE, prob=(5:1)^3) #>  [1] 9 9 7 8 8 7 8 7 8 8 7 8 9  # Of course, sampling more than the available elements without # setting replace=TRUE will result in an error set.seed(42); tryCatch(zample(7, size=2), error=wrap_error) #> #E> cannot take a sample larger than the population #> #E> when 'replace = FALSE'"},{"path":"https://torfason.github.io/zmisc/reference/zeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate sequence in a safe way — zeq","title":"Generate sequence in a safe way — zeq","text":"zeq() function creates increasing integer sequence, differs standard one silently generate decreasing sequence second argument smaller first. second argument one smaller first generate empty sequence, difference greater, function throw error.","code":""},{"path":"https://torfason.github.io/zmisc/reference/zeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate sequence in a safe way — zeq","text":"","code":"zeq(from, to)"},{"path":"https://torfason.github.io/zmisc/reference/zeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate sequence in a safe way — zeq","text":"lower bound sequence higher bound sequence","code":""},{"path":"https://torfason.github.io/zmisc/reference/zeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate sequence in a safe way — zeq","text":"sequence ranging ","code":""},{"path":"https://torfason.github.io/zmisc/reference/zeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate sequence in a safe way — zeq","text":"","code":"# For increasing sequences, zeq() and seq() are identical zeq(11,15) #> [1] 11 12 13 14 15 zeq(11,11) #> [1] 11  # If second argument equals first-1, an empty sequence is returned zeq(11,10) #> numeric(0)  # If second argument is less than first-1, the function throws an error tryCatch(zeq(11,9), error=wrap_error) #> #E> to >= from - 1 is not TRUE"},{"path":"https://torfason.github.io/zmisc/reference/zingle.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the single (unique) value found in a vector — zingle","title":"Return the single (unique) value found in a vector — zingle","text":"zingle() function returns first element vector, elements identical first one (vector zingle value). elements identical, throws error. vector must contain least one non-NA value, function errors well. especially useful aggregations, values given group identical, want make sure.","code":""},{"path":"https://torfason.github.io/zmisc/reference/zingle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the single (unique) value found in a vector — zingle","text":"","code":"zingle(x, na.rm = FALSE)"},{"path":"https://torfason.github.io/zmisc/reference/zingle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the single (unique) value found in a vector — zingle","text":"x Vector elements identical na.rm NA elements removed prior comparison","code":""},{"path":"https://torfason.github.io/zmisc/reference/zingle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the single (unique) value found in a vector — zingle","text":"zingle element vector","code":""},{"path":"https://torfason.github.io/zmisc/reference/zingle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the single (unique) value found in a vector — zingle","text":"Optionally takes na.rm parameter, similarly sum, mean aggregate functions. TRUE, NA values removed prior comparing elements, function accept input values contain combination single value NA values (least one non-NA value required).","code":""},{"path":"https://torfason.github.io/zmisc/reference/zingle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the single (unique) value found in a vector — zingle","text":"","code":"# If all elements are identical, all is good. # The value of the element is returned. zingle(c(\"Alpha\", \"Alpha\", \"Alpha\")) #> [1] \"Alpha\"  # If any elements differ, an error is thrown tryCatch(zingle(c(\"Alpha\", \"Beta\", \"Alpha\")), error=wrap_error) #> #E> all(x[1] == x) is not TRUE  if (require(\"dplyr\", quietly=TRUE, warn.conflicts=FALSE)) {   d <- tibble::tribble(     ~id, ~name, ~fouls,     1, \"James\", 3,     2, \"Jack\",  2,     1, \"James\", 4   )    # If the data is of the correct format, all is good   d %>%     dplyr::group_by(id) %>%     dplyr::summarise(name=zingle(name), total_fouls=sum(fouls))  } #> # A tibble: 2 × 3 #>      id name  total_fouls #>   <dbl> <chr>       <dbl> #> 1     1 James           7 #> 2     2 Jack            2  if (require(\"dplyr\", quietly=TRUE, warn.conflicts=FALSE)) {   # If a name does not match its ID, we should get an error   d[1,\"name\"] <- \"Jammes\"   tryCatch({     d %>%       dplyr::group_by(id) %>%       dplyr::summarise(name=zingle(name), total_fouls=sum(fouls))   }, error=wrap_error) } #> #E> Problem while computing `name = zingle(name)`."},{"path":"https://torfason.github.io/zmisc/reference/zmisc.html","id":null,"dir":"Reference","previous_headings":"","what":"zmisc: Vector Look-Ups and Safer Sampling — zmisc","title":"zmisc: Vector Look-Ups and Safer Sampling — zmisc","text":"collection utility functions facilitate looking vector values lookup  table, support safer approach vector  sampling, sequence generation, aggregation. information, see vignette(\"zmisc\").","code":""},{"path":[]},{"path":"https://torfason.github.io/zmisc/news/index.html","id":"zmisc-021","dir":"Changelog","previous_headings":"","what":"zmisc 0.2.1","title":"zmisc 0.2.1","text":"CRAN release: 2022-02-02 version includes documentation improvements well fixes.","code":""},{"path":"https://torfason.github.io/zmisc/news/index.html","id":"zmisc-020","dir":"Changelog","previous_headings":"","what":"zmisc 0.2.0","title":"zmisc 0.2.0","text":"version adds two functions, lookup() lookuper(), designed look values lookup table way works smoothly R workflow, particular within pipes.","code":""},{"path":"https://torfason.github.io/zmisc/news/index.html","id":"zmisc-010","dir":"Changelog","previous_headings":"","what":"zmisc 0.1.0","title":"zmisc 0.1.0","text":"initial version zmisc, includes three functions, zample(), zeq(), zingle(), safer sampling, sequencing subsetting data processing workflow","code":""}]
