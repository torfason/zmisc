% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assertions.R
\name{qassert}
\alias{qassert}
\alias{assert_flag}
\alias{assert_string}
\alias{assert_number}
\alias{assert_inumber}
\alias{assert_dnumber}
\alias{assert_int}
\alias{assert_count}
\alias{assert_day}
\alias{assert_logical}
\alias{assert_character}
\alias{assert_numeric}
\alias{assert_integer}
\alias{assert_double}
\alias{assert_integerish}
\alias{assert_naturalish}
\alias{assert_factor}
\alias{assert_complex}
\alias{assert_raw}
\alias{assert_date}
\alias{assert_list}
\alias{assert_data_frame}
\alias{assert_data_table}
\alias{assert_tibble}
\title{Assertion functions adapted for rlang output}
\usage{
qassert(x, ...)

assert_flag(x, ...)

assert_string(x, ...)

assert_number(x, ...)

assert_inumber(x, ...)

assert_dnumber(x, ...)

assert_int(x, ...)

assert_count(x, ...)

assert_day(x, ...)

assert_logical(x, ...)

assert_character(x, ...)

assert_numeric(x, ...)

assert_integer(x, ...)

assert_double(x, ...)

assert_integerish(x, ...)

assert_naturalish(x, ...)

assert_factor(x, ...)

assert_complex(x, ...)

assert_raw(x, ...)

assert_date(x, ...)

assert_list(x, ...)

assert_data_frame(x, ...)

assert_data_table(x, ...)

assert_tibble(x, ...)
}
\arguments{
\item{x}{The variable to assert}

\item{...}{Additional parameters passed to corresponding \link{checkmate}
functions \code{\link[checkmate:qassert]{checkmate::qtest()}}, \code{\link[checkmate:checkFlag]{checkmate::check_flag()}}, etc.}
}
\value{
The original object if the assertion passes.
}
\description{
Most common \link{checkmate} functions, adapted to output \link{rlang} style error
messages on failed assertions. The actual checking is done by
\code{\link[checkmate:qassert]{checkmate::qtest()}}, \code{\link[checkmate:checkFlag]{checkmate::check_flag()}} and related functions.\tabular{lll}{
   \strong{R Type} \tab \strong{Scalar} \tab \strong{Vector} \cr
   \code{logical} \tab \code{assert_flag(x)} \tab \code{assert_logical(x)} \cr
   \code{character} \tab \code{assert_string(x)} \tab \code{assert_character(x)} \cr
   \code{numeric} \tab \code{assert_number(x)} \tab \code{assert_numeric(x)} \cr
   \code{integer} \tab \code{assert_inumber(x)}⁴ \tab \code{assert_integer(x)} \cr
   \code{double} \tab \code{assert_dnumber(x)}⁴ \tab \code{assert_double(x)} \cr
   \code{integerish}¹ \tab \code{assert_int(x)} \tab \code{assert_integerish(x)} \cr
   \code{naturalish}² \tab \code{assert_count(x)} \tab \code{assert_naturalish(x)}⁴ \cr
   \code{factor} \tab ³ \tab \code{assert_factor(x)} \cr
   \code{complex} \tab ³ \tab \code{assert_complex(x)} \cr
   \code{raw} \tab ³ \tab \code{assert_raw(x)} \cr
   \code{Date} \tab \code{assert_day(x)} \tab \code{assert_date(x)} \cr
}

\itemize{
\item ¹ \code{integerish} refers to functional integers (numbers that are very close
to integer values), regardless of type (\code{integer} or \code{double} )
\item ² \code{naturalish} refers to functional integers restricted to the natural
numbers (zero and positive numbers
\item ³ No assertion functions are provided for scalar \code{factor}, \code{complex}, or \code{raw}
\item ⁴ Not available in the \link{checkmate} package
}\tabular{lll}{
   a \tab b \tab c \cr
   a \tab b \tab c \cr
}
}
